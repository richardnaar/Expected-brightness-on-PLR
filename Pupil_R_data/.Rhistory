geom_line(size=1.3, position=position_dodge(.5)) +
geom_point(size=3, position=position_dodge(.5)) +
scale_colour_hue(l=30)  +
#  facet_wrap(~ subid) +
theme_bw()+
theme(
plot.background = element_blank()
# ,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.ticks = element_line(size = 2),
legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
theme(legend.position = c(.85, .905)) +
theme(axis.line.x=element_line(size = 1),
axis.line.y=element_line(size = 1))+
# ggtitle("Predictor type and RT") +
theme(text = element_text(size=12)) +
ylab("Reaction Time") +
xlab("Trials completed") +
expand_limits(y=c(150, 600)) +
theme(axis.text.y = element_text(size="12", angle = 0, hjust = 0)) +
theme(axis.text.x = element_text(size="12", angle = 0, hjust = 0))
# lmer
#df_all$WhichStim <- as.factor(df_all$WhichStim)
print("Fitting Linerar Mixed-Effects Models")
fit <- lmer(ReactionTime ~ WhichStim + condition + KeyOrder + EST + gender + subage + (1|subid), data=rd)
summary(fit)
library(sjPlot)
print("Forest-plot of standardized beta values...")
plot_model(fit, type = c("std"))
print("Comparison between predictide compared to non-predicted...")
pairwise.t.test(rd$ReactionTime, rd$condition, p.adjust.method="BH", paired=F)
print("Comparison between men and women...")
pairwise.t.test(rd$ReactionTime, rd$gender, p.adjust.method="BH", paired=F)
print("Coputing averages over age and plotting...")
agem <- summarySE(rd, measurevar="ReactionTime", groupvars=c("subage")) #
cor.test(agem$subage, agem$ReactionTime)
ggscatter(agem, x = "subage", y = "ReactionTime",
add = "reg.line", conf.int = TRUE, size = 3,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Age", ylab = "Reaction Time",
add.params = list(color = "red",
fill = "lightgray")) +
# feedback
fb <- summarySE(rd, measurevar="feedback", groupvars=c("WhichCue")) # , "subid"
ggscatter(agem, x = "subage", y = "ReactionTime",
add = "reg.line", conf.int = TRUE, size = 3,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Age", ylab = "Reaction Time",
add.params = list(color = "red",
fill = "lightgray"))
fb <- summarySE(rd, measurevar="feedback", groupvars=c("WhichCue")) # , "subid"
fb # participants got virtually no feedback in the RND condition (on aprox. every third trial in other conditions)
fb <- summarySE(rd, measurevar="feedback", groupvars=c("cond2")) # , "subid"
fb # participants got virtually no feedback in the RND condition (on aprox. every third trial in other conditions)
fb <- summarySE(rd, measurevar="feedback", groupvars=c("cond")) # , "subid"
fb # participants got virtually no feedback in the RND condition (on aprox. every third trial in other conditions)
fb <- summarySE(rd, measurevar="feedback", groupvars=c("WhichStim")) # , "subid"
fb
fb <- summarySE(rd, measurevar="feedback", groupvars=c("condition")) # , "subid"
fb # participants got virtually no feedback in the RND condition (on aprox. every third trial in other conditions)
fb$feedback # participants got virtually no feedback in the RND condition (on aprox. every third trial in other conditions)
print(paste("Note: participants got feedback almost exclucively in the predicted condition: ", fb$feedback))
fb$feedback[1]
print(paste("Note: participants got feedback almost exclucively in the predicted condition: ", fb$feedback[1], 'vs', fb$feedback[2]))
print(paste("Note: participants got feedback almost exclucively in the predicted condition: ", round(fb$feedback[1],1), 'vs', round(fb$feedback[2],1))
print(paste("Note: participants got feedback almost exclucively in the predicted condition: ", round(fb$feedback[1],1), 'vs', round(fb$feedback[2],1)))
print( paste("Note: participants got feedback almost exclucively in the predicted condition: ", round(fb$feedback[1],1), "vs", round(fb$feedback[2],1)) )
print( paste("Note: participants got feedback almost exclucively in the predicted condition: ", round(fb$feedback[1],2), "vs", round(fb$feedback[2],2)) )
print( paste("Note: participants got feedback almost exclucively in the predicted condition: ", round(fb$feedback[1],2), "% vs", round(fb$feedback[2],2)), "%" )
print( paste("Note: participants got feedback almost exclucively in the predicted condition: ", round(fb$feedback[1],2), "% vs", round(fb$feedback[2],2), "%" ) )
print( paste("Note: participants got feedback almost exclucively in the predicted condition: " ...
, round(fb$feedback[1],2), "% vs", round(fb$feedback[2],2), "%" ) )
print( paste("Note: participants got feedback almost exclucively in the predicted condition: " +
, round(fb$feedback[1],2), "% vs", round(fb$feedback[2],2), "%" ) )
print( paste("Note: participants got feedback almost exclucively in the predicted condition: ", +
round(fb$feedback[1],2), "% vs", round(fb$feedback[2],2), "%" ) )
print( paste("Note: participants got feedback almost exclucively in the 'predicted' condition: ", +
round(fb$feedback[1],2), "% vs", round(fb$feedback[2],2), "%" ) )
fb <- summarySE(rd, measurevar="feedback", groupvars=c("condition")) # , "subid"
print( paste("Note: participants got feedback almost exclucively in the 'predicted' condition: ", +
round(fb$feedback[1],2)*100, "% vs", round(fb$feedback[2],2)*100, "%" ) )
pupil_data <- read_csv("data.csv")
print("Lines of code before 'Proportion of trials left out' should be run to make it work properly")
print("WARNING: Lines of code before the message 'Proportion of trials left out...' should be run to make it work properly.")
for (ij in 1:length(rd$subid)) {
rd$subid[ij] <- paste(c('PLR', rd$subid[ij]),collapse = "")
}
rd$condition <- NULL
rd$subid <- as.factor(rd$subid)
rd$trialNumber <- as.factor(rd$trialNumber)
pupil_data$subid <- as.factor(pupil_data$subid)
pupil_data$trialNumber <- as.factor(pupil_data$trialNumber)
rd <- rd[order(rd$subid), ]
rd <- rd[order(rd$trialNumber), ]
pupil_data <- pupil_data[order(pupil_data$subid), ]
pupil_data <- pupil_data[order(pupil_data$trialNumber), ]
# all_data <- cbind(pupil_data, rd)
all_data <- transform(merge(pupil_data, rd, by=c('subid', 'trialNumber')))
# baseline <- as.data.frame(pupil_data$baseline)
# baseline$timeWindow <- 'baseline'
# names(baseline)[1]<-"pupilMean"
#window_0 <- as.data.frame(pupil_data$window0)
#window_0$timeWindow <- 'window_0'
#names(window_0)[1]<-"pupilMean"
window_1 <- as.data.frame(all_data$window1)
names(window_1)[1]<-"pupilMean"
window_1$timeWindow <- 'window_1'
window_2 <- as.data.frame(all_data$window2)
names(window_2)[1]<-"pupilMean"
window_2$timeWindow <- 'window_2'
window_3 <- as.data.frame(all_data$window3)
names(window_3)[1]<-"pupilMean"
window_3$timeWindow <- 'window_3'
window_4 <- as.data.frame(all_data$window4)
names(window_4)[1]<-"pupilMean"
window_4$timeWindow <- 'window_4'
df_pupil <- rbind(all_data, all_data, all_data, all_data)
pupil <- rbind(window_1, window_2, window_3, window_4)
df_all <- cbind(df_pupil, pupil)
# df_all$condition2 <- revalue(df_all$condition2, c("anticipated_w"="anticipated white", "anticipated_b"="anticipated black", "unexpected_w"="unexpected", "unexpected_b"="unexpected"))
# ei tea, kas siin oli seda mÃµeldud
df_all$cond2 <- df_all$condition
df_all$cond2 <- revalue(df_all$cond2, c("anticipated_w"="anticipated white", "anticipated_b"="anticipated black", "unexpected_w"="unexpected", "unexpected_b"="unexpected"))
for (ij in 1:length(df_all$subid)) {
df_all$condition3[ij] <- paste(c(df_all$cond2[ij] ,df_all$pre_post[ij]), collapse = " ")
}
df_all$cond2 <- as.factor(df_all$cond2)
df_all$condition3 <- revalue(df_all$condition3, c("anticipated black post"="Anticipated black (post)", "anticipated black pre" ="Anticipated black (pre)", "anticipated white post"="Anticipated white (post)", "anticipated white pre" = "Anticipated white (pre)", "unexpected post"="Unexpected (post)", "unexpected pre"="Unexpected (pre)"))
df_all$predict <- df_all$cond2
df_all$predict <- revalue(df_all$predict, c("anticipated black" = "Anticipated", "anticipated white" = "Anticipated", "unexpected" = "Unexpected"))
df_all$timeWindow <- revalue(df_all$timeWindow, c("window_1" = "1st window", "window_2" = "2nd window", "window_3" = "3rd window", "window_4" = "4th window"))
dfpm <- summarySE(df_all, measurevar="pupilMean", groupvars=c("timeWindow", "condition3")) # , "subid"
ggplot(dfpm, aes(x=timeWindow, y=pupilMean, group = condition3, color=condition3, shape=condition3)) + #  , group=subid, color=subid
geom_errorbar(aes(ymin=pupilMean-ci, ymax=pupilMean+ci), width=.3, size= 1, position=position_dodge(.15)) +
geom_line(size=1.8, position=position_dodge(.15)) +
geom_point(size=3.5, position=position_dodge(.15)) +
scale_colour_hue(l=40)  +
# facet_wrap(~ sub_id)
theme_bw()+
theme(
plot.background = element_blank()
# ,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.ticks = element_line(size = 2),
legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
theme(legend.position = c(.90, .20)) +
theme(axis.line.x=element_line(size = 1),
axis.line.y=element_line(size = 1))+
# ggtitle("Predictor type and RT") +
theme(text = element_text(size=12)) +
ylab("Pupil Change") +
xlab("Analysis Windows") +
# expand_limits(y=c(150, 600)) +
theme(axis.text.y = element_text(size="12", angle = 0, hjust = 0)) +
theme(axis.text.x = element_text(size="12", angle = 0, hjust = 0))
rd <- read.delim("pupil_rt.txt"); print("Loading the data...")
summary(rd)
# define two columns based on the cue
print("Defining new variables: cond (w,b,rnd), cond2 (w,b,rndv,rndb), and order (trial progression)...")
for (ij in 1:length(rd$subid)) {
if (rd$WhichCue[ij] == 132 || rd$WhichCue[ij] == 231) {
rd$condition[ij] <- 'anticipated'
ifelse(rd$WhichStim[ij] == 1, rd$cond[ij] <- 'Anticipated white', rd$cond[ij] <- 'Anticipated black')
ifelse(rd$WhichStim[ij] == 1, rd$cond2[ij] <- 'Anticipated white', rd$cond2[ij] <- 'Anticipated black')
} else if (rd$WhichCue[ij] == 182 || rd$WhichCue[ij] == 281)  {
rd$condition[ij] <- 'unexpected'
ifelse(rd$WhichStim[ij] == 1, rd$cond[ij] <- 'Unexpected white', rd$cond[ij] <- 'Unexpected black')
ifelse(rd$WhichStim[ij] == 1, rd$cond2[ij] <- 'Unexpected', rd$cond2[ij] <- 'Unexpected')
}
}
# define new column 'order' based on the trial number
gg=0 # keeps track of all the iterations
for (ij in 1:length(unique(rd$subid))) {
countw=0; countb=0; countrnd=0;
data <- subset(rd, subid == unique(rd$subid)[ij])
data <- data[order(data$trialNumber),]
for (ii in 1:length(data$subid)) {
gg = gg + 1
if (data$cond[ii] == 'Anticipated white') {
countw = countw + 1; rd$order[gg] = countw
} else if (data$cond[ii] == 'Anticipated black') {
countb = countb + 1; rd$order[gg] = countb
} else {
countrnd = countrnd + 1; rd$order[gg] = countrnd
}
}
}
#rd$cond2 <- revalue(rd$cond2, c("anticipated_1"="Anticipated white", "anticipated_0"="Anticipated black", "unexpected"="Unexpected"))
print("Removing too slow or too fast RTs and incorrect trials...")
nTrials = nrow(rd)
rd <- subset(rd, ReactionTime > 100) # MoraâCortes, Ridderinkhof, & Cohen (2018) - cut-off
rd <- subset(rd, correct == '1')
#rd <- subset(rd, ReactionTime < 1500)
# condition spesific upper cut-off (3.5 x median) # MoraâCortes, Ridderinkhof, & Cohen (2018) - 2.5 SD cut-off
rd$cond <- as.factor(rd$cond); sds <- 0; rd2 <- data.frame()
for (ij in 1:length(unique(rd$cond))){
data = subset( rd,  cond == levels(rd$cond)[ij] ); nrowsbefore <- nrow(data)
#  hist(data$ReactionTime,30)
data = subset( data, ReactionTime <  median(data$ReactionTime)*3.5 )
#  print(nrowsbefore-nrow(data))
#  hist(data$ReactionTime,30)
rd2 = rbind(rd2, data)
}
rd <- rd2; remove(rd2, data)
print(paste('Proportion of trials left out:', round( 100-(nrow(rd)*100)/nTrials,2), "%" ))
rd$order <- as.numeric(rd$order)
print("Taking condition averages...")
rdm <- summarySE(rd, measurevar="ReactionTime", groupvars=c("cond2", "order")) #
print("... and plotting.")
ggplot(rdm, aes(x=order, y=ReactionTime, group = cond2, color=cond2)) + #  , group=subid, color=subid
geom_errorbar(aes(ymin=ReactionTime-ci, ymax=ReactionTime+ci), width=.3, size= 1, position=position_dodge(.5)) +
geom_line(size=1.3, position=position_dodge(.5)) +
geom_point(size=3, position=position_dodge(.5)) +
scale_colour_hue(l=30)  +
#  facet_wrap(~ subid) +
theme_bw()+
theme(
plot.background = element_blank()
# ,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.ticks = element_line(size = 2),
legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
theme(legend.position = c(.85, .905)) +
theme(axis.line.x=element_line(size = 1),
axis.line.y=element_line(size = 1))+
# ggtitle("Predictor type and RT") +
theme(text = element_text(size=12)) +
ylab("Reaction Time") +
xlab("Trials completed") +
expand_limits(y=c(150, 600)) +
theme(axis.text.y = element_text(size="12", angle = 0, hjust = 0)) +
theme(axis.text.x = element_text(size="12", angle = 0, hjust = 0))
# lmer
#df_all$WhichStim <- as.factor(df_all$WhichStim)
print("Fitting Linerar Mixed-Effects Models")
fit <- lmer(ReactionTime ~ WhichStim + condition + KeyOrder + EST + gender + subage + (1|subid), data=rd)
summary(fit)
library(sjPlot)
print("Forest-plot of standardized beta values...")
plot_model(fit, type = c("std"))
print("Comparison between predicted compared to non-predicted...")
pairwise.t.test(rd$ReactionTime, rd$condition, p.adjust.method="BH", paired=F)
print("Comparison between men and women...")
pairwise.t.test(rd$ReactionTime, rd$gender, p.adjust.method="BH", paired=F)
print("Coputing averages over age and plotting...")
agem <- summarySE(rd, measurevar="ReactionTime", groupvars=c("subage")) #
cor.test(agem$subage, agem$ReactionTime)
ggscatter(agem, x = "subage", y = "ReactionTime",
add = "reg.line", conf.int = TRUE, size = 3,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Age", ylab = "Reaction Time",
add.params = list(color = "red",
fill = "lightgray"))
# feedback
fb <- summarySE(rd, measurevar="feedback", groupvars=c("condition")) # , "subid"
print( paste("Note: participants got feedback almost exclucively in the 'predicted' condition: ", +
round(fb$feedback[1],2)*100, "% vs", round(fb$feedback[2],2)*100, "%" ) )
pupil_data <- read_csv("data.csv"); print("Loading the data...")
print("Loading the data..."); pupil_data <- read_csv("data.csv")
View(pupil_data)
print("WARNING: May not work properly if the lines of code before the message 'Proportion of trials left out...' not run yet.")
for (ij in 1:length(rd$subid)) {
rd$subid[ij] <- paste(c('PLR', rd$subid[ij]),collapse = "")
}
rd$subid <- as.factor(rd$subid)
rd$trialNumber <- as.factor(rd$trialNumber)
pupil_data$subid <- as.factor(pupil_data$subid)
pupil_data$trialNumber <- as.factor(pupil_data$trialNumber)
rd <- rd[order(rd$subid), ]
rd <- rd[order(rd$trialNumber), ]
pupil_data <- pupil_data[order(pupil_data$subid), ]
pupil_data <- pupil_data[order(pupil_data$trialNumber), ]
# all_data <- cbind(pupil_data, rd)
all_data <- transform(merge(pupil_data, rd, by=c('subid', 'trialNumber')))
View(all_data)
class(rd$subid)
rd <- read.delim("pupil_rt.txt"); print("Loading the data...")
summary(rd)
# define two columns based on the cue
print("Defining new variables: cond (w,b,rnd), cond2 (w,b,rndv,rndb), and order (trial progression)...")
for (ij in 1:length(rd$subid)) {
if (rd$WhichCue[ij] == 132 || rd$WhichCue[ij] == 231) {
rd$condition[ij] <- 'anticipated'
ifelse(rd$WhichStim[ij] == 1, rd$cond[ij] <- 'Anticipated white', rd$cond[ij] <- 'Anticipated black')
ifelse(rd$WhichStim[ij] == 1, rd$cond2[ij] <- 'Anticipated white', rd$cond2[ij] <- 'Anticipated black')
} else if (rd$WhichCue[ij] == 182 || rd$WhichCue[ij] == 281)  {
rd$condition[ij] <- 'unexpected'
ifelse(rd$WhichStim[ij] == 1, rd$cond[ij] <- 'Unexpected white', rd$cond[ij] <- 'Unexpected black')
ifelse(rd$WhichStim[ij] == 1, rd$cond2[ij] <- 'Unexpected', rd$cond2[ij] <- 'Unexpected')
}
}
# define new column 'order' based on the trial number
gg=0 # keeps track of all the iterations
for (ij in 1:length(unique(rd$subid))) {
countw=0; countb=0; countrnd=0;
data <- subset(rd, subid == unique(rd$subid)[ij])
data <- data[order(data$trialNumber),]
for (ii in 1:length(data$subid)) {
gg = gg + 1
if (data$cond[ii] == 'Anticipated white') {
countw = countw + 1; rd$order[gg] = countw
} else if (data$cond[ii] == 'Anticipated black') {
countb = countb + 1; rd$order[gg] = countb
} else {
countrnd = countrnd + 1; rd$order[gg] = countrnd
}
}
}
#rd$cond2 <- revalue(rd$cond2, c("anticipated_1"="Anticipated white", "anticipated_0"="Anticipated black", "unexpected"="Unexpected"))
print("Removing too slow or too fast RTs and incorrect trials...")
nTrials = nrow(rd)
rd <- subset(rd, ReactionTime > 100) # MoraâCortes, Ridderinkhof, & Cohen (2018) - cut-off
rd <- subset(rd, correct == '1')
#rd <- subset(rd, ReactionTime < 1500)
# condition spesific upper cut-off (3.5 x median) # MoraâCortes, Ridderinkhof, & Cohen (2018) - 2.5 SD cut-off
rd$cond <- as.factor(rd$cond); sds <- 0; rd2 <- data.frame()
for (ij in 1:length(unique(rd$cond))){
data = subset( rd,  cond == levels(rd$cond)[ij] ); nrowsbefore <- nrow(data)
#  hist(data$ReactionTime,30)
data = subset( data, ReactionTime <  median(data$ReactionTime)*3.5 )
#  print(nrowsbefore-nrow(data))
#  hist(data$ReactionTime,30)
rd2 = rbind(rd2, data)
}
rd <- rd2; remove(rd2, data)
print(paste('Proportion of trials left out:', round( 100-(nrow(rd)*100)/nTrials,2), "%" ))
rd$order <- as.numeric(rd$order)
print("Taking condition averages...")
rdm <- summarySE(rd, measurevar="ReactionTime", groupvars=c("cond2", "order")) #
print("... and plotting.")
ggplot(rdm, aes(x=order, y=ReactionTime, group = cond2, color=cond2)) + #  , group=subid, color=subid
geom_errorbar(aes(ymin=ReactionTime-ci, ymax=ReactionTime+ci), width=.3, size= 1, position=position_dodge(.5)) +
geom_line(size=1.3, position=position_dodge(.5)) +
geom_point(size=3, position=position_dodge(.5)) +
scale_colour_hue(l=30)  +
#  facet_wrap(~ subid) +
theme_bw()+
theme(
plot.background = element_blank()
# ,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.ticks = element_line(size = 2),
legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
theme(legend.position = c(.85, .905)) +
theme(axis.line.x=element_line(size = 1),
axis.line.y=element_line(size = 1))+
# ggtitle("Predictor type and RT") +
theme(text = element_text(size=12)) +
ylab("Reaction Time") +
xlab("Trials completed") +
expand_limits(y=c(150, 600)) +
theme(axis.text.y = element_text(size="12", angle = 0, hjust = 0)) +
theme(axis.text.x = element_text(size="12", angle = 0, hjust = 0))
# lmer
#df_all$WhichStim <- as.factor(df_all$WhichStim)
print("Fitting Linerar Mixed-Effects Models")
fit <- lmer(ReactionTime ~ WhichStim + condition + KeyOrder + EST + gender + subage + (1|subid), data=rd)
summary(fit)
library(sjPlot)
print("Forest-plot of standardized beta values...")
plot_model(fit, type = c("std"))
print("Comparison between predicted compared to non-predicted...")
pairwise.t.test(rd$ReactionTime, rd$condition, p.adjust.method="BH", paired=F)
print("Comparison between men and women...")
pairwise.t.test(rd$ReactionTime, rd$gender, p.adjust.method="BH", paired=F)
print("Coputing averages over age and plotting...")
agem <- summarySE(rd, measurevar="ReactionTime", groupvars=c("subage")) #
cor.test(agem$subage, agem$ReactionTime)
ggscatter(agem, x = "subage", y = "ReactionTime",
add = "reg.line", conf.int = TRUE, size = 3,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Age", ylab = "Reaction Time",
add.params = list(color = "red",
fill = "lightgray"))
# feedback
fb <- summarySE(rd, measurevar="feedback", groupvars=c("condition")) # , "subid"
print( paste("Note: participants got feedback almost exclucively in the 'predicted' condition: ", +
round(fb$feedback[1],2)*100, "% vs", round(fb$feedback[2],2)*100, "%" ) )
class(rt$subid)
class(rd$subid)
rd[cols] <- lapply(rd[cols], factor)
rd[cols] <- lapply(rd[cols], factor)
rd[cols]
levels(rd)
colnames(rd)
rd[,cols] <- lapply(rd[,cols], factor)
class(rd)
which( colnames(rd) == cols)
which( colnames(rd) == cols)
match( colnames(rd) == cols)
match( colnames(rd), cols)
match(cols, colnames(rd))
match("subid", colnames(rd))
which(colnames(rd)%in%cols)
cols
#rd$condition <- NULL
cols = c("subid","trialNumber")
which(colnames(rd)%in%cols)
inds = which(colnames(rd)%in%cols)
inds = which(colnames(rd)%in%cols)
rd[inds] <- lapply(rd[inds], factor)
class(rt$subid)
class(rd$subid)
#rd$condition <- NULL
cols = c("subid","trialNumber"); inds = which(colnames(rd)%in%cols)
rd[inds] <- lapply(rd[inds], factor)
inds = which(colnames(pupil_data)%in%cols); pupil_data[inds] <- lapply(pupil_data[inds], factor)
print("Loading the data..."); pupil_data <- read_csv("data.csv")
inds = which(colnames(pupil_data)%in%cols); pupil_data[inds] <- lapply(pupil_data[inds], factor)
colnames(all_data)
print("Loading the data..."); pupil_data <- read_csv("data.csv")
print("WARNING: May not work properly if the lines of code before the message 'Proportion of trials left out...' not run yet.")
for (ij in 1:length(rd$subid)) {
rd$subid[ij] <- paste(c('PLR', rd$subid[ij]),collapse = "")
}
# coercing columns (subid, trialNumber) to factors
cols = c("subid","trialNumber"); inds = which(colnames(rd)%in%cols); rd[inds] <- lapply(rd[inds], factor)
inds = which(colnames(pupil_data)%in%cols); pupil_data[inds] <- lapply(pupil_data[inds], factor)
print("Merging pupil data with RT data...")
all_data <- transform(merge(pupil_data, rd, by=c('subid', 'trialNumber')))
colnames(all_data)
grep("window", colnames(all_data) )
inds <- grep("window", colnames(all_data) )
inds
colnames(all_data)[inds]
long <- melt(setDT(all_data), id.vars = c("window_1","window_2","window_3","window_3"), variable.name = "window")
long <- melt(setDT(wide), id.vars = c("window_1","window_2","window_3","window_3"), variable.name = "window")
library(data.table)
long <- melt(setDT(wide), id.vars = c("window_1","window_2","window_3","window_3"), variable.name = "window")
long <- melt(setDT(all_data), id.vars = c("window_1","window_2","window_3","window_3"), variable.name = "window")
colnames(all_data)[inds]
long <- melt(setDT(all_data), id.vars = c("window1","window2","window3","window4"), variable.name = "window")
View(long)
long <- melt(setDT(all_data), id.vars = c('subid', 'trialNumber'), variable.name = "window")
inds
long <- melt(setDT(all_data), measure.vars = inds, variable.name = "window")
View(long)
inds[]
inds[-1]
inds[]
class(list
clas(inds)
class(inds)
colnames(all_data)
inds
long <- melt(setDT(all_data), measure.vars = 10:13, variable.name = "window")
colnames(all_data)[inds]
colnames(all_data)[inds]
long <- melt(setDT(all_data), measure.vars = 10:13, variable.name = colnames(all_data)[inds])
long <- melt(setDT(all_data), measure.vars = 10:13, variable.name = c("window1", "window2", "window3", "window4" ))
long <- melt(setDT(all_data), measure.vars = 10:13, variable.name = "window1")
View(long)
library(tidyr)
inds
long <- all_data %>% gather(year, value, 10:13)
c(colnames(all_data)[inds])
colnames(all_data)[inds]
long <- reshape(all_data, varying=c("window1", "window2", "window3", "window4"), direction="long", idvar="subid", sep="_")
long <- reshape(all_data, varying=c("window1", "window2", "window3", "window4"), +
direction="long", idvar=c('subid', 'trialNumber'), sep="_")
long <- reshape(all_data, varying=c("window1", "window2", "window3", "window4"), direction="long", idvar=c('subid', 'trialNumber'), sep="_")
long <- reshape(all_data, varying=c("window1", "window2", "window3", "window4"), direction="long", idvar=c('subid', 'trialNumber'), sep="")
all_data <- transform(merge(pupil_data, rd, by=c('subid', 'trialNumber')))
print("Loading the data..."); pupil_data <- read_csv("data.csv")
View(pupil_data)
print("WARNING: May not work properly if the lines of code before the message 'Proportion of trials left out...' not run yet.")
for (ij in 1:length(rd$subid)) {
rd$subid[ij] <- paste(c('PLR', rd$subid[ij]),collapse = "")
}
# coercing columns (subid, trialNumber) to factors
cols = c("subid","trialNumber"); inds = which(colnames(rd)%in%cols); rd[inds] <- lapply(rd[inds], factor)
inds = which(colnames(pupil_data)%in%cols); pupil_data[inds] <- lapply(pupil_data[inds], factor)
print("Merging pupil data with RT data...")
all_data <- transform(merge(pupil_data, rd, by=c('subid', 'trialNumber')))
inds <- grep("window", colnames(all_data) )
colnames(all_data)[inds]
long <- reshape(all_data, varying=c("window1", "window2", "window3", "window4"), direction="long", idvar=c('subid', 'trialNumber'), sep="")
all_data <- transform(merge(pupil_data, rd, by=c('subid', 'trialNumber')))
print("Loading the data..."); pupil_data <- read_csv("data.csv")
print("WARNING: May not work properly if the lines of code before the message 'Proportion of trials left out...' not run yet.")
for (ij in 1:length(rd$subid)) {
rd$subid[ij] <- paste(c('PLR', rd$subid[ij]),collapse = "")
}
# coercing columns (subid, trialNumber) to factors
cols = c("subid","trialNumber"); inds = which(colnames(rd)%in%cols); rd[inds] <- lapply(rd[inds], factor)
inds = which(colnames(pupil_data)%in%cols); pupil_data[inds] <- lapply(pupil_data[inds], factor)
print("Merging pupil data with RT data...")
all_data <- transform(merge(pupil_data, rd, by=c('subid', 'trialNumber')))
df_merged <- merge(pupil_data,rd, by = c('subid', 'trialNumber'), all=TRUE) # by = c('subid', 'trialNumber')
View(df_merged)
df_merged <- merge(pupil_data,rd, by = c('subid', 'trialNumber'), all=FALSE) # by = c('subid', 'trialNumber')
inds = which(colnames(pupil_data)%in%cols)
inds
pupil_data[inds]
class(pupil_data$trialNumber)
class(pupil_data$subid)
class(rd$subid)
class(subid)$subid)
class(rd$subid)
class(rd$trialNumber)
